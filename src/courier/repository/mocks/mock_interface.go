// Code generated by MockGen. DO NOT EDIT.
// Source: src/courier/usecase/interface.go

// Package mock_usecase is a generated GoMock package.
package mock_usecase

import (
	context "context"
	reflect "reflect"
	time "time"

	gomock "github.com/golang/mock/gomock"
	model "yandex-team.ru/bstask/model"
)

// MockRepository is a mock of Repository interface.
type MockRepository struct {
	ctrl     *gomock.Controller
	recorder *MockRepositoryMockRecorder
}

// MockRepositoryMockRecorder is the mock recorder for MockRepository.
type MockRepositoryMockRecorder struct {
	mock *MockRepository
}

// NewMockRepository creates a new mock instance.
func NewMockRepository(ctrl *gomock.Controller) *MockRepository {
	mock := &MockRepository{ctrl: ctrl}
	mock.recorder = &MockRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRepository) EXPECT() *MockRepositoryMockRecorder {
	return m.recorder
}

// CreateCouriers mocks base method.
func (m *MockRepository) CreateCouriers(ctx context.Context, couriers []*model.CreateCourier) ([]*model.Courier, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateCouriers", ctx, couriers)
	ret0, _ := ret[0].([]*model.Courier)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateCouriers indicates an expected call of CreateCouriers.
func (mr *MockRepositoryMockRecorder) CreateCouriers(ctx, couriers interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateCouriers", reflect.TypeOf((*MockRepository)(nil).CreateCouriers), ctx, couriers)
}

// GetById mocks base method.
func (m *MockRepository) GetById(ctx context.Context, id int64) (*model.Courier, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetById", ctx, id)
	ret0, _ := ret[0].(*model.Courier)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetById indicates an expected call of GetById.
func (mr *MockRepositoryMockRecorder) GetById(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetById", reflect.TypeOf((*MockRepository)(nil).GetById), ctx, id)
}

// GetCouriers mocks base method.
func (m *MockRepository) GetCouriers(ctx context.Context, limit, offset int32) ([]*model.Courier, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCouriers", ctx, limit, offset)
	ret0, _ := ret[0].([]*model.Courier)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCouriers indicates an expected call of GetCouriers.
func (mr *MockRepositoryMockRecorder) GetCouriers(ctx, limit, offset interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCouriers", reflect.TypeOf((*MockRepository)(nil).GetCouriers), ctx, limit, offset)
}

// GetEarnings mocks base method.
func (m *MockRepository) GetEarnings(ctx context.Context, id int64, startDate, endDate time.Time) ([]int32, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetEarnings", ctx, id, startDate, endDate)
	ret0, _ := ret[0].([]int32)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetEarnings indicates an expected call of GetEarnings.
func (mr *MockRepositoryMockRecorder) GetEarnings(ctx, id, startDate, endDate interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEarnings", reflect.TypeOf((*MockRepository)(nil).GetEarnings), ctx, id, startDate, endDate)
}
